
add more widgets:
   - layouts
       - border (✔)
       - row (✔)
       - column (✔)
       - list (✔)
   - buttons
       - push button (✔)
       - radio buttons (✔)
       - check boxes (✔)
       - menu button (✔)
   - button group (✔)
   - label (✔)
   - multi-line label
   - scroll bars (✔)
   - viewport (✔)
   - menu bar (✔)
   - menu (✔)
   - dialog box
       - alert (✔)
       - info (✔)
       - yes/no (✔)
       - multivalue
   - text entry (✔)
   - text box
   - horizontal separator (✔)
   - vertical separator (✔)
   - option box
   - combo box
   - padding/null pane
   - progress bar
   - status bar
   - context menu
   - split pane

add controls:
   - list control (scrolling list view)
   - tree control
   - multivalue dialog box (dialog box containing other widgets)
   - file save
   - file open

Look at other toolkits, work out if there are any other controls or
widgets that could be useful.


 PRIORITIES:

*. event handling (delayed), input

*. Layouts - make it pretty, make it functional

*. File explorer - local fs, archives, s3

*. create "ports" for different backends; experiment with asciimatics,
 urwid, vanilla curses.

*. menu bar / box from command table


USABILITY
=========
No part of scroll bars should take focus - I think

Widgets (and dialogs) should have a "value" that can be queried.

Text edit components should support select, cut, paste

Expand inks so can paint a background in a fg/bg colour and using a
specific character for the bg.

Scroll up / down / left / right line / page commands on
viewport. Might not be too easy to do if arrows already used to
navigating between widgets... could change navigate to just use TAB
and SHIFT+TAB then could use arrow keys for scrolling.

"ESC" in text entry widgets should move the focus off the entry so
that keyboard nav can be used without the entry capturing the input
(i.e., ESC should act as TAB does in entry widgets). This wouldn't be
necessary if could use ALT to indicate acccelerator usage :/

Menubar event handling not right - in particular accelerators dealt
with by the frame that select menu bar items without associated popup
menus are not given focus - they likely should do ("activate" on
button needs to set focus if button is not already focus)

Borders and separators drawn using the "draw_to" primitive aren't
visible because the "A_BOLD" attribute is not observed by that method.


LAYOUT IMPROVEMENTS
===================
TEXT ALIGNMENT and truncation ON BORDER TITLES

Measuring text needs to be better; len(str) might not be effective for
multibyte characters.

Widgets need a "fill" initarg to indicate if their preferred size
should be FILL rather than an explicit preferred size. Some layouts /
parents will want the widgets to take all available space, and some
won't. Also - spacing / padding / null sheets to take excess space.

Decorated buttons are not tall enough; should be room for "top border"
+ "button" + "drop shadow" + "bottom border". Currently there isn't.


VISUAL FEEDBACK
===============
test / fix screen resize! See docs from asciimatics


GENERAL / CODING
================
DIFFERENT TYPES OF BORDERS

DOCUMENTATION - write some

USE THE SHEET TYPES ALREADY PRESENT TO BUILD CONTROLS OUT OF; E.G.,
SCROLLBAR BUTTONS SHOULD BE BUTTONS, PADDING SHOULD BE BORDER PANE,
ETC.
In order to implement this for scroll bar buttons at least, the button
labels must be able to shrink to 1x1

BORDERLAYOUT CLEAR METHOD ISN'T SETTING BACKGROUND COLOUR PROPERLY
(SEE "green" BORDER IN BASIC.PY)

Unit tests, documentation, project setup.

Migrate everything that displays text into having a contained Label
that holds the text instead.

Rename "get_screen_transform()" + apply transform pair into something
like "convert_to_screen_coordinate"?

Migrate everything to LTRBs.

If label shrinks too much it gives up trying to display in a reduced
space. Should either prevent resize below the minimum space, or allow
the label to shrink to nothing.


EVENT HANDLING
==============
event handling (button click / release) seems slow. Investigate.

click detection is really ropey. Maybe asciimatics is not reporting
them like it should?

Implement a "functional event" that allows functions to be called at a
later point in time, after the current event is dealt with.

Can the widgets be based on urwid instead of asciimatics? Not sure if
that will make a difference to anything, might be worth trying.

Change "find_next_focus" and "find_prev_focus" methods so they wrap
instead of stopping at end of sheet hierarchy.


===============================================

EXAMPLE WIDGET APP - MAKE IT SHOW ALL THE OPTIONS FOR ALL THE WIDGETS.

TIDY THE WIDGETS, DOCUMENT THE PROTOCOLS.

EVENT HANDLING - HOW MUCH IS NEEDED?
  - on_click
  - on_double_click
  - on_activate
  - focus_in
  - focus_out

Key events go to frame, then frame focus, and ascend to parents and
finally back to the frame. Maybe should go to focus directly first?

Focus is chosen one of 3 ways:

   1. highest z-order widget that accepts focus on initial walk
   2. mouse click on widget that accepts focus
   3. keyboard navigation to widget that accepts focus

Is "focus widget" different to "selected widget"? Is it possible to
tab to a widget that does NOT accept focus? Probably not... "selected"
and "focused" are the same thing.

Is "pressed" feedback needed? Maybe but can be subtler than it is
currently.
