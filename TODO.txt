
Widgets:

   - layouts
       - border (✔)
       - row (✔)
       - column (✔)
       - list (✔)
   - buttons
       - push button (✔)
       - radio buttons (✔)
       - check boxes (✔)
       - menu button (✔)
   - button group (✔)
   - label (✔)
   - multi-line label
   - scroll bars (✔)
   - viewport (✔)
   - menu bar (✔)
   - menu (✔)
   - dialog box
       - alert (✔)
       - info (✔)
       - yes/no (✔)
       - multivalue
   - text entry (✔)
   - multi-line text box (✔)
   - horizontal separator (✔)
   - vertical separator (✔)
   - option box (✔)
   - combo box
   - padding/null pane
   - progress bar
   - status bar
   - context menu
   - split pane

add controls:

   - list control (scrolling list view)
   - tree control
   - multivalue dialog box (dialog box containing other widgets)
   - file save
   - file open

Look at other toolkits, work out if there are any other controls or
widgets that could be useful.


 PRIORITIES:

*. event handling (delayed), input

*. Layouts - make it pretty, make it functional

*. File explorer - local fs, archives, s3

*. create "ports" for different backends; experiment with asciimatics,
 urwid, vanilla curses.

*. menu bar / box from command table

*. identifying usages of ALT modifier


USABILITY
=========
Widgets (and dialogs) should have a "value" that can be queried -
introduce a bunch of mixin types, "ValueMixin", "FocusMixin",
"LayoutMixin", "MultipleChildMixin", "SingleChildMixin"...

Dialogs are only pseudo-modal; can't interact with other components
whilst popup is up but they are still receiving events and
running. Work out how to get values out of a dialog box in this case;
it's easy when they block. So either make them block (how?) or work
out how to deal with async results.

Text edit components should support select, cut, paste

Scroll up / down / left / right line / page commands on
viewport. Might not be too easy to do if arrows already used to
navigating between widgets... could change navigate to just use TAB
and SHIFT+TAB then could use arrow keys for scrolling.

Scrolled sheet is slightly wider than expected. Could fall out
naturally once migration to LTRBs is complete.

Document how pens work. Rethink how pens work :) - the nature of pens
just sucks at the moment. Or perhaps it's just the way popups have
been set up that sucks, I'm not sure [most pen issues are related to
trying to force specific colours on widgets that are not in a common
hierarchy with other widgets that they need to share a colour scheme
with. Usually this happens between "some widget" and "some popup menu
created from that widget"]

Accelerators - if transient window is open and accelerator is used
that is not mapped in that transient window, then the main frame
should be queried to see if the accelerator exists. If it does the
transient should be closed and the accelerator widget activated
instead.  - OR - Alternatively - disable other accelerators if popup
is on screen. This might not be efficient. *MAYBE* this "rule" should
only be applied to popup transients, not dialogs? Hrm.

When placing a transient window on screen (dialog / popup) the current
focus should be cached and focus returned to it when the transient
window is closed.

LAYOUT IMPROVEMENTS
===================
TEXT ALIGNMENT and truncation ON BORDER TITLES

Measuring text needs to be better; len(str) might not be effective for
multibyte characters. Need to try a few and see what breaks.

Widgets need a "fill" initarg to indicate if their preferred size
should be FILL rather than an explicit preferred size. Some layouts /
parents will want the widgets to take all available space, and some
won't. Also - spacing / padding / null sheets to take excess space.

Decorated button sizes are not calculated properly. should be room for "top border"
+ "button" + "drop shadow", no need for bottom border.

  v                 v
 |0|1|2|3|4|5|6|7|8|9|0|
 |<---   width   --->|

L=0 (incl), W=10 (incl), R=10 (excl)

width = (r-l)+1
height = (b-t)+1

Decide if region is x,y + w,h or l,t,r,b. Either works but need to be
consistent.

Migrate everything to LTRBs.


VISUAL FEEDBACK
===============
test / fix screen resize! See docs from asciimatics

When moving up / down lines in text area if move from longer line to
shorter line to empty line, cursor is drawn at negative offset when
reach empty line - add "max(insertion_point|text_offset, 0)"
somewhere.


GENERAL / CODING
================
DIFFERENT TYPES OF BORDERS

DOCUMENTATION - write some (more)

USE THE SHEET TYPES ALREADY PRESENT TO BUILD CONTROLS OUT OF; E.G.,
SCROLLBAR BUTTONS SHOULD BE BUTTONS, PADDING SHOULD BE BORDER PANE,
ETC.
In order to implement this for scroll bar buttons at least, the button
labels must be able to shrink to 1x1

Unit tests, documentation, project setup.

Migrate everything that displays text into having a contained Label
that holds the text instead.

If label shrinks too much it gives up trying to display in a reduced
space. Should either prevent resize below the minimum space, or allow
the label to shrink to nothing.


EVENT HANDLING
==============
event handling (button click / release) seems slow. Investigate.

click detection is really ropey. Maybe asciimatics is not reporting
them like it should?

Implement a "functional event" that allows functions to be called at a
later point in time, after the current event is dealt with.

Can the widgets be based on urwid instead of asciimatics? Not sure if
that will make a difference to anything, might be worth trying.

Change "find_next_focus" and "find_prev_focus" methods so they wrap
instead of stopping at end of sheet hierarchy.


===============================================

EXAMPLE WIDGET APP - MAKE IT SHOW ALL THE OPTIONS FOR ALL THE WIDGETS.

TIDY THE WIDGETS, DOCUMENT THE PROTOCOLS.

EVENT HANDLING - HOW MUCH IS NEEDED?
  - on_click
  - on_double_click
  - on_activate
  - focus_in
  - focus_out

Key events go to frame, then frame focus, and ascend to parents and
finally back to the frame. Maybe should go to focus directly first?

Focus is chosen one of 3 ways:

   1. highest z-order widget that accepts focus on initial walk
   2. mouse click on widget that accepts focus
   3. keyboard navigation to widget that accepts focus

Is "focus widget" different to "selected widget"? Is it possible to
tab to a widget that does NOT accept focus? Probably not... "selected"
and "focused" are the same thing.

Is "pressed" feedback needed? Maybe but can be subtler than it is
currently.
