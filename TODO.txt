
Widgets:

   - layouts
       - border (✔)
       - row (✔)
       - column (✔)
       - list (✔)
   - buttons
       - push button (✔)
       - radio buttons (✔)
       - check boxes (✔)
       - menu button (✔)
   - button group (✔)
   - label (✔)
   - multi-line label
   - scroll bars (✔)
   - viewport (✔)
   - menu bar (✔)
   - menu (✔)
   - dialog box
       - alert (✔)
       - info (✔)
       - yes/no (✔)
       - multivalue (✔)
   - text entry (✔)
   - multi-line text box (✔)
   - horizontal separator (✔)
   - vertical separator (✔)
   - option box (✔)
   - combo box
   - padding/null pane
   - progress bar
   - status bar

add controls:

   - list control (✔)
   - tree control
   - file open
   - file save
   - widget explorer - add "sheet select" mode then draw widget tree
     for selected widget

potential other controls / widgets:

   - split pane
   - tab pane
   - value boxes (sliders, dials)
   - context menu

Look at other toolkits, work out if there are any other controls or
widgets that could be useful.


 PRIORITIES:

*. tree control

*. widget explorer

*. event handling (delayed), input

*. File explorer - local fs, archives, s3

*. create "ports" for different backends; experiment with asciimatics,
 urwid, vanilla curses.

*. menu bar / box from command table

*. identifying usages of ALT modifier


USABILITY
=========
Widgets (and dialogs) should have a "value" that can be queried -
introduce a bunch of mixin types, "ValueMixin", "FocusMixin",
"LayoutMixin", "MultipleChildMixin", "SingleChildMixin",
"CommandServerMixin"...

Dialogs are only pseudo-modal; can't interact with other components
whilst popup is up but they are still receiving events and
running. Work out how to get values out of a dialog box in this case;
it's easy when they block. So either make them block (how?) or work
out how to deal with async results.

Text edit components should support select, cut, paste

Scroll up / down / left / right line / page commands on
viewport. Might not be too easy to do if arrows already used to
navigating between widgets... could change navigate to just use TAB
and SHIFT+TAB then could use arrow keys for scrolling.

Document how pens work. Rethink how pens work :) - the nature of pens
just sucks at the moment. Or perhaps it's just the way popups have
been set up that sucks, I'm not sure [most pen issues are related to
trying to force specific colours on widgets that are not in a common
hierarchy with other widgets that they need to share a colour scheme
with. Usually this happens between "some widget" and "some popup menu
created from that widget"]

Accelerators - if transient window is open and accelerator is used
that is not mapped in that transient window, then the main frame
should be queried to see if the accelerator exists. If it does the
transient should be closed and the accelerator widget activated
instead.  - OR - Alternatively - disable other accelerators if popup
is on screen. This might not be efficient. *MAYBE* this "rule" should
only be applied to popup transients, not dialogs? Hrm.

Adding accelerators for 0-9 would add another 10 but would need a
different way to display them. If taking this approach could also use
$%^&* etc. as accelerators...

When placing a transient window on screen (dialog / popup) the current
focus should be cached and focus returned to it when the transient
window is closed.
As part of the focus handling changes, need to properly implement
graft / attach / detach along with events or NOTE-* methods.


LAYOUT IMPROVEMENTS
===================
TEXT ALIGNMENT and truncation ON BORDER TITLES

Measuring text needs to be better; len(str) might not be effective for
multibyte characters. Need to try a few and see what breaks.

Move drawing ops to use LTRB regions where appropriate instead of
separate coord + width, height.

Could use a tool that displays selected widgets in a layout that can
have its size set, and see how different sized containers allocate and
render different widget types - add a "samples" folder and stick a few
sample apps in it.


VISUAL FEEDBACK
===============
test / fix screen resize! See docs from asciimatics

All popup windows should have drop shadows by default, including menu
boxes. This makes it a bit clearer that they are popup boxes (and that
it should be possible to close them using ESC). Not sure if this means
that buttons should NOT have drop shadows...

Popup windows should be implemented as separate frames rather than as
special top-level sheet types. Maybe.

When moving up / down lines in text area if move from longer line to
shorter line to empty line, cursor is drawn at negative offset when
reach empty line - add "max(insertion_point|text_offset, 0)"
somewhere. THIS NO LONGER APPEARS TO HAPPEN; KEEP TRYING TO REPRODUCE.

If list control contains decorated buttons the button just being
scrolled out of view at the top is not rendering properly.

Slug + offset calculations mean that the slug is drawn up against
scrollbar buttons when there is still movement range. Clicking
scrollbar buttons successfully scrolls remaining range, but visual
does not reflect it.

Possibly calculate slug size using a smaller bar and save offset=0 and
offset=max for extreme ends of scroll range?

If a button is "pressed" and then receives the focus (due to shoddy
mouse event handling), need to clear the "pressed" state of the button
(without activating the button).

Not clear how to return values from dialogs or popups. For now expect
to do this via some callback.

list control in multivalue dialog that is component of combo box event
handling needs sorting; selecting value in list should update combo
value and close list, typing into combo box should filter list and
extend list if "return" hit; ESC in list control moves to next focus
by default but doesn't seem to be a way to close the dialog "popup"!

Note that default event handling is going to be complicated because
the combo box popup is not a child of the combo box.

Should the multivalue dialog popup but then not steal focus? It makes
it difficult to use it as a component of some control... might be good
to have a popup type where the events are all still sent to the
original top-level. Think about how this should work.


List Control
============

Currently focused item scrolls into view if outside current visible
range, but only works currently when list control is responsible for
managing focus change, in its cycle previous / cycle next
methods. Global focus changes (via TAB navigation) do not yet move new
focus into view.

if focus is moved off list box and then returned to it, focus should
return to previously focused list item.

scroll extents not quite right and might be easier to debug in list
control than in general viewport.

Most of the keyboard navigation in the listcontrol should be moved to
the listlayout. Then they would also work in button boxes etc. Might
also want to move a bunch off the menu box, if the listlayout
implements them. Look at hierarchy and work out where the command
tables need to be. ACTUALLY - should NOT be on listlayout because if
used at the top level just to lay things out in a column the nav
should not work the way it works when its used as an embedded widget.

Identify which other sheet types should be "tab stops" (rename to
"focus delegators"?) - tab navigation won't work within them, but
arrows / ctrl-n / ctrl-p should still work. Potential candidates:
menuboxes, buttonboxes?

If embedded list layout contains decorated buttons when scrolled off
top of list the drop shadow is not drawn properly.


GENERAL / CODING
================
DIFFERENT TYPES OF BORDERS

Use Python's "hasattr()" instead of testing if val is None where
pertinent.

Should button box have similar motion commands to list controls / menu
boxes?

Add some error types:

  - NotAttachedError

Add region.py file to geometry to put common region methods in?

DOCUMENTATION - write some (more)

USE THE SHEET TYPES ALREADY PRESENT TO BUILD CONTROLS OUT OF; E.G.,
SCROLLBAR BUTTONS SHOULD BE BUTTONS, PADDING SHOULD BE BORDER PANE,
ETC.
In order to implement this for scroll bar buttons at least, the button
labels must be able to shrink to 1x1

Unit tests, documentation, project setup.

Migrate everything that displays text into having a contained Label
that holds the text instead.

If label shrinks too much it gives up trying to display in a reduced
space. Should either prevent resize below the minimum space, or allow
the label to shrink to nothing.


EVENT HANDLING
==============
event handling (button click / release) seems slow. Investigate.

click detection is really ropey. Maybe asciimatics is not reporting
them like it should?

Implement a "functional event" that allows functions to be called at a
later point in time, after the current event is dealt with.

Can the widgets be based on urwid instead of asciimatics? Not sure if
that will make a difference to anything, might be worth trying.

Change "find_next_focus" and "find_prev_focus" methods so they wrap
instead of stopping at end of sheet hierarchy.


===============================================

EXAMPLE WIDGET APP - MAKE IT SHOW ALL THE OPTIONS FOR ALL THE WIDGETS.

TIDY THE WIDGETS, DOCUMENT THE PROTOCOLS.

EVENT HANDLING - HOW MUCH IS NEEDED?
  - on_click
  - on_double_click
  - on_activate
  - focus_in
  - focus_out

Key events go to frame, then frame focus, and ascend to parents and
finally back to the frame. Maybe should go to focus directly first?

Focus is chosen one of 3 ways:

   1. highest z-order widget that accepts focus on initial walk
   2. mouse click on widget that accepts focus
   3. keyboard navigation to widget that accepts focus

Is "focus widget" different to "selected widget"? Is it possible to
tab to a widget that does NOT accept focus? Probably not... "selected"
and "focused" are the same thing.

Is "pressed" feedback needed? Maybe but can be subtler than it is
currently.
