
add more widgets:
   - layouts
       - border (✔)
       - row (✔)
       - column (✔)
       - list (✔)
   - buttons
       - push button (✔)
       - radio buttons (✔)
       - check boxes (✔)
       - menu button (✔)
   - button group (✔)
   - label (✔)
   - scroll bars (✔)
   - viewport (✔)
   - menu bar (✔)
   - menu (✔)
   - dialog box
       - alert (✔)
       - info (✔)
       - yes/no
       - multivalue
   - text entry
   - text box
   - horizontal separator (✔)
   - vertical separator (✔)
   - option box
   - combo box
   - padding/null pane
   - progress bar
   - status bar

add controls:
   - tree control
   - multivalue dialog box (dialog box containing other widgets)
   - file save
   - file open

Look at other toolkits, work out if there are any other controls or
widgets that could be useful.


 PRIORITIES:

*. event handling (delayed), input

*. Layouts - make it pretty, make it functional

*. File explorer - local fs, archives, s3


USABILITY
=========
ACCELERATORS + MNEMONICS - for buttons and generic commands

No part of scroll bars should take focus - I think


LAYOUT IMPROVEMENTS
===================
TEXT ALIGNMENT ON BUTTONS / BORDER TITLES

Label needs to support alignments and truncation.

Multiline labels

Measuring text needs to be better; len(str) might not be effective for
multibyte characters.


VISUAL FEEDBACK
===============
test / fix screen resize! See docs from asciimatics


GENERAL / CODING
================
DIFFERENT TYPES OF BORDERS

DOCUMENTATION - write some

USE THE SHEET TYPES ALREADY PRESENT TO BUILD CONTROLS OUT OF; E.G.,
SCROLLBAR BUTTONS SHOULD BE BUTTONS, PADDING SHOULD BE BORDER PANE,
ETC.

BORDERLAYOUT CLEAR METHOD ISN'T SETTING BACKGROUND COLOUR PROPERLY
(SEE "green" BORDER IN BASIC.PY)

Unit tests, documentation, project setup. Make it more professional,
push to gitlab. Maybe people will use it... given the chance.

Migrate everything that displays text into having a contained Label
that holds the text instead.

Rename "get_screen_transform()" + apply transform pair into something
like "convert_to_screen_coordinate"?

Rename "_select_next" etc. to be "cycle_focus_forward/backward".

EVENT HANDLING
==============
event handling (button click / release) seems slow. Investigate.

click detection is really ropey. Maybe asciimatics is not reporting
them like it should?

Implement a "functional event" that allows functions to be called at a
later point in time, after the current event is dealt with.

Can the widgets be based on urwid instead of asciimatics? Not sure if
that will make a difference to anything, might be worth trying.

Change "find_next_focus" and "find_prev_focus" methods so they wrap
instead of stopping at end of sheet hierarchy.

===============================================

EXAMPLE WIDGET APP - MAKE IT SHOW ALL THE OPTIONS FOR ALL THE WIDGETS.

TIDY THE WIDGETS, DOCUMENT THE PROTOCOLS.

EVENT HANDLING - HOW MUCH IS NEEDED?
  - on_click
  - on_double_click
  - on_activate
  - focus_in
  - focus_out

BUTTON LABEL ALIGNMENT - do with label

Replace button hard-coded label with label sheet, implement alignments
in that type so it doesn't need to be done all over. Use in other
places also, such as when drawing text for borders.

PUSH BUTTONS: CENTER ALIGN BY DEFAULT
RADIO + CHECK BUTTONS: LEFT ALIGN BY DEFAULT

Key events go to frame, then frame focus, and ascend to parents and
finally back to the frame.

Focus is chosen one of 3 ways:

   1. highest z-order widget that accepts focus on initial walk
   2. mouse click on widget that accepts focus
   3. keyboard navigation to widget that accepts focus

Is "focus widget" different to "selected widget"? Is it possible to
tab to a widget that does NOT accept focus? Probably not... "selected"
and "focused" are the same thing.

Is "pressed" feedback needed? Maybe but can be subtler than it is
currently.
